{%- from "dynaformcustom.macro" import render_custombone -%} 
{%- from "dynaformcustom.macro" import customformat_renderer -%}
{%- from "dynaformcustom.macro" import customvalue_renderer -%}
{%- from "dynaformcustom.macro" import customdescr_renderer -%}
{%- from "dynaformbones/numeric.macro"  import numericbone -%}
{%- from "dynaformbones/captcha.macro"  import captchabone -%}
{%- from "dynaformbones/password.macro"  import passwordbone -%}
{%- from "dynaformbones/selectmulti.macro"  import selectmultibone -%}
{%- from "dynaformbones/selectone.macro"  import selectonebone -%}
{%- from "dynaformbones/string.macro"  import stringbone -%}    
{%- from "dynaformbones/text.macro"  import textbone -%}
{%- from "dynaformbones/date.macro"  import datebone -%}
{%- from "dynaformbones/plain.macro"  import plainbone -%}
{%- from "dynaformbones/relational.macro"  import relational -%}
{%- from "dynaformbones/hierarchy.macro"  import hierarchy -%} 
{%- from "dynaformbones/file.macro"  import fileBone -%} 
{%- from "dynaformbones/bool.macro"  import booleanbone -%} 

{# neue Dynaform#}

{# ignore & hidden == liste von bone_names, form uniquename f端r customrenderer, modulename f端r viewSkel,#}
{%- macro skel_render(Skel,ignor=[],hidden=[],form="",modulename="",format="advanced") -%}
{# ViewSkel #}
	{% if not Skel["structure"] and not modulename==""%}
		{% set renderskel = "viewskel"%}
		{% if modulename=="contact"%}
			{% set renderskel = "mailSkel"%}
		{% endif%}
		{% set struct = getSkel(modulename,renderskel).items() %}
		{% set tmpSkel ={}%}
		{% do tmpSkel.update({"value":Skel, "errors":{}}) %}
		{% set Skel = tmpSkel %}
{# EditSkel/AddSkel #}
	{% elif Skel["structure"] %}
		{% set struct = Skel["structure"].items() %}
	{% else%}
{# Fehlender Modulname => leer rendern #}
		struct={}
	{% endif%}
{# Element rendern #}
	{%set formattpl = format_renderer(bone_name,bone,Skel,form,format)%}
	{%if regex_search("^mask_+",format|string)%}
		{% set savetpl = {"tpl":formattpl}%}
		{%- for bone_name, bone in struct -%}
			{% if not bone_name in ignor%}
				{% set temptpl = element_renderer(bone_name,hidden,bone,Skel,form,format,savetpl["tpl"]) %}
				{% do savetpl.update({"tpl":temptpl})%}
			{%- endif -%}
		{%- endfor -%}
		{{savetpl["tpl"]}}
	{% else %}
		{%- for bone_name, bone in struct -%}
			{% if not bone_name in ignor%}
				{{element_renderer(bone_name,hidden,bone,Skel,form,format,formattpl)}}
			{%- endif -%}
		{%- endfor -%}
	{%- endif -%}  

	{# Error handling #}
	{%- if Skel.errors|length>0 -%}
		<strong>{{_("Please correct your inputs!")}}</strong><br />
		{{_("Not all required entry fields have been filled:") + " "}}
        {%- set first=True -%}
		{%- for errornoame in Skel.errors -%}
			{%-if Skel.errors[errornoame]!=None and Skel["structure"][errornoame].required -%}
				{{ "," if not first }} <span class="mandatory">{{Skel["structure"][errornoame].descr}}</span>
                {%-set first=False -%}
			{%- endif -%}
		{%- endfor -%}
		<br />
		<br />
	{%- endif -%}
{%- endmacro -%}



{# ausgabe eines Bones durch Descr und Value#}
{% macro element_renderer(bone_name,hidden,bone,Skel,form,format,formattpl) %}
	{% if bone.type == "hidden" or bone_name in hidden %}     
		<input type="hidden" name="{{ bone_name }}" value="{{Skel.value[bone_name] }}" />
		{%if regex_search("^mask_+",format|string)%}
			{{formattpl}}
		{%endif%}   
	{% elif bone.visible  %}
		{%if regex_search("^mask_+",format|string)%}
			{%set descr = descr_renderer(bone_name,bone,Skel,form) %}
			{%set value = value_renderer(bone_name,bone,Skel,form) %}
			{{formattpl|replace("$"+bone_name+"_descr",descr)|replace("$"+bone_name,value)}}
		{%else%}
			{%set descr = descr_renderer(bone_name,bone,Skel,form) %}
			{%set value = value_renderer(bone_name,bone,Skel,form) %}
			{{formattpl|replace("$descr",descr)|replace("$value",value)}}
			{%endif%}
	{%elif not bone.visible and regex_search("^mask_+",format|string)%}
		{{formattpl}}	{# im Mask-mode muss das ersetzte TPL zur端ckgegeben werden#}
	{%- endif -%}
{% endmacro %}

{# fomratierung des Ger端stes um Descr und Value #}
{%macro format_renderer(bone_name,bone,Skel,form,format)%}
	{%if not format=="advanced" %}
		{%if format=="basic"%}
				<dt class="td_formdescr td_formdescr_{{bone_name}}">
					$descr
				</dt>
				<dd class="td_formfield">
					$value
				</dd>
		{%else%}
			{% set customFormat =  customformat_renderer( bone_name,bone,Skel,form,format) %}
			{% if customFormat|trim %} {#We got a customBone for this #}
				{{ customFormat }}
			{% endif %}
		{% endif %}
	{% else %}
			<dt class="td_formdescr{% if bone_name in Skel.errors and Skel.errors[bone_name] %} msg warning{% endif %} td_formdescr_{{bone_name}}"
				{% if bone.descr|length()>25 %}
					colspan="2" style="width: 100%;"        
				{% endif %}    
			>
				<div class="span_formdescr
					{% if bone.descr|length()>25 %}
						span_formdescrbig
					{% endif %}
				">
					$descr
				</div>
				{% if bone.params and bone.params["hint"] %}
					<button title="{{bone.params["hint"]}}" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon" role="button" aria-disabled="false">
						<span class="ui-button-icon-pri	mary ui-icon ui-icon-lightbulb"></span>
						<span class="ui-button-text">info</span>
					</button>
				{% endif %}  
			</dt>
			{% if  bone.descr|length()>25 %}  
					<dd colspan="2"  class="td_formfield">
			{% else %} 
					<dd  class="td_formfield">
			{% endif %} 
				$value
			</dd>
	{% endif %}
	
{%endmacro%}

{#formatierung des Values#}
{%macro descr_renderer(bone_name,bone,Skel,form)%}
	{% set customDescr =  customdescr_renderer( bone_name,bone,Skel,form) %}
	{% if customDescr|trim %} {#We got a customBone for this #}
		{{ customDescr }}
	{%else%}
		
		{{ bone.descr }}
		{% if not Skel["structure"] %}
			:
		{% endif %}
		{%if bone.required and not bone.readOnly and Skel["structure"] %}
			*
		{% endif %}
	{%endif%}
{%endmacro%}

{# formatierung der Descr #}
{%macro value_renderer(bone_name,bone,Skel,form)%}
	{% set customBone =  customvalue_renderer( bone_name,bone,Skel,form) %}
			{% if customBone|trim %} {#We got a customBone for this #}
				{{ customBone }}
			{%- elif not Skel["structure"] -%} {# = ViewSkel#}
				{{ plainbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "str" or bone.type.startswith("str.") -%} 
				{{ stringbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "numeric" or bone.type.startswith("numeric.") -%}
				{{ numericbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "password"  or bone.type.startswith("password.")-%}
				{{ passwordbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "captcha"  or bone.type.startswith("captcha.")-%}  
				{{ captchabone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "date"  or bone.type.startswith("date.")-%}
				{{datebone(bone_name,bone,Skel.value[bone_name])}} 
			{%- elif bone.type == "selectone" or bone.type.startswith("selectone.")%}
				{{ selectonebone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "selectmulti" or bone.type.startswith("selectmulti.") %}     
				{{ selectmultibone( bone_name,bone,Skel.value[bone_name] ) or bone.type.startswith("treeitem.") }}
			{%- elif bone.type == "bool" or bone.type.startswith("bool.") %}     
					{{ booleanbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "text" or bone.type.startswith("text.") -%}
				{{ textbone( bone_name,bone,Skel.value[bone_name] ) or bone.type.startswith("treeitem.") }}
			{%- elif bone.type.startswith("treeitem.file") -%}
				{{ fileBone( bone_name, bone, Skel.value[bone_name] ) or bone.type.startswith("treeitem.") }}
			{%- elif bone.type=="relational" or bone.type.startswith("relational.") -%}
				{{ relational( bone_name, bone, Skel.value[bone_name] ) }}
			{%- elif bone.type == "hierarchy" or bone.type.startswith("hierarchy.") %}
				{{ hierarchy( bone_name, bone, Skel.value[bone_name] ) }}
			{%- elif bone.type=="treeitem" or bone.type.startswith("treeitem.") %}
				<input type="hidden" name="{{ bone_name }}" value="{{Skel.value[bone_name].id }}" />   
			<!-- 	Treeitem -->
			{#	{{hierarchy( bone_name, bone, Skel.value[bone_name] ) }} #}				
			{%- else -%}<!--Defaultbonerenderer -->
				{{ render_custombone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- endif -%}
{%endmacro%}




{#ALTE DYNAFORM#}
{# \/ \/ \/ \/#}
{%- macro render_dynaform(Skel,ignor=[],form="",modulename="",markMandatoryFields=True) -%}

	{% if not Skel["structure"] and not modulename==""%}
		{% set renderskel = "viewskel"%}
		{% if modulename=="contact"%}
			{% set renderskel = "mailSkel"%}
		{% endif%}
		{% set stuct = getSkel(modulename,renderskel).items() %}
	{% else %}
		{% set stuct = Skel["structure"].items() %}
	{% endif%}

	{%if not Skel["structure"]%}
	 	{% set tmpSkel ={}%}
		{% do tmpSkel.update({"value":Skel, "errors":{}}) %}
		{% set Skel = tmpSkel %}
	{% endif %}


	{%- for bone_name, bone in stuct -%}
		{% if not bone_name in ignor%}
			{{dynaform_tr(bone_name,bone,Skel,form,markMandatoryFields)}}
		{%- endif -%}
	{%- endfor -%} 

	{# Error handling #}
	{%- if Skel.errors|length>0 -%}
		<strong>{{_("Please correct your inputs!")}}</strong><br />
		{{_("Not all required entry fields have been filled:") + " "}}
        {%- set first=True -%}
		{%- for errornoame in Skel.errors -%}
			{%-if Skel.errors[errornoame]!=None and Skel["structure"][errornoame].required -%}
				{{ "," if not first }} <span class="mandatory">{{Skel["structure"][errornoame].descr}}</span>
                {%-set first=False -%}
			{%- endif -%}
		{%- endfor -%}
		<br />
		<br />
	{%- endif -%}
{%- endmacro -%}

{% macro dynaform_tr(bone_name,bone,Skel,form,markMandatoryFields=True) %}
	##set debug=False
	{% if bone.type == "hidden" %}     
		<input type="hidden" name="{{ bone_name }}" value="{{Skel.value[bone_name] }}" />   
	{% else %}
		{% if bone.visible %}   
				<dt class="td_formdescr{% if bone_name in Skel.errors and Skel.errors[bone_name] %} msg warning{% endif %} td_formdescr_{{bone_name}}"
					{% if bone.descr|length()>25 %}
						colspan="2" style="width: 100%;"        
					{% endif %}    
				>
					<div class="span_formdescr
						{% if bone.descr|length()>25 %}
							span_formdescrbig
						{% endif %}
					">
						{{ bone.descr }}
						{%if markMandatoryFields and bone.required and not bone.readOnly and Skel["structure"] %}
							*
						{% endif %}
						{% if debug %}
							{{bone.type}}
						{% endif %}
					</div>
					{% if bone.params and bone.params["hint"] %}
						<button title="{{bone.params["hint"]}}" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon" role="button" aria-disabled="false">
							<span class="ui-button-icon-pri	mary ui-icon ui-icon-lightbulb"></span>
							<span class="ui-button-text">info</span>
						</button>
					{% endif %}  
			  
				</dt>
			{% if  bone.descr|length()>25 %}  
					<dd colspan="2"  class="td_formfield">
			{% else %} 
					<dd  class="td_formfield">
			{% endif %} 
		{% endif %}  
			{% set customBone =  render_custombone( bone_name,bone,Skel.value[bone_name],form ) %}
			{% if customBone|trim %} {#We got a customBone for this #}
				{{ customBone }}
			{%- elif bone.type == "str" or bone.type.startswith("str.") -%} 
				{{ stringbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "numeric" or bone.type.startswith("numeric.") -%}
				{{ numericbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "password"  or bone.type.startswith("password.")-%}
				{{ passwordbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "captcha"  or bone.type.startswith("captcha.")-%}  
				{{ captchabone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "date"  or bone.type.startswith("date.")-%}
				{{datebone(bone_name,bone,Skel.value[bone_name])}} 
			{%- elif bone.type == "selectone" or bone.type.startswith("selectone.")%}
				{{ selectonebone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "selectmulti" or bone.type.startswith("selectmulti.") %}     
				{{ selectmultibone( bone_name,bone,Skel.value[bone_name] ) or bone.type.startswith("treeitem.") }}
			{%- elif bone.type == "bool" or bone.type.startswith("bool.") %}     
				{{ booleanbone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- elif bone.type == "text" or bone.type.startswith("text.") -%}
				{{ textbone( bone_name,bone,Skel.value[bone_name] ) or bone.type.startswith("treeitem.") }}
			{%- elif bone.type.startswith("treeitem.file") -%}
				{{ fileBone( bone_name, bone, Skel.value[bone_name] ) or bone.type.startswith("treeitem.") }}
			{%- elif bone.type=="relational" or bone.type.startswith("relational.") -%}
				{{ relational( bone_name, bone, Skel.value[bone_name] ) }}
			{%- elif bone.type == "hierarchy" or bone.type.startswith("hierarchy.") %}
				{{ hierarchy( bone_name, bone, Skel.value[bone_name] ) }}
			{%- elif bone.type=="treeitem" or bone.type.startswith("treeitem.") %}
				<input type="hidden" name="{{ bone_name }}" value="{{Skel.value[bone_name].id }}" />   
			<!-- 	Treeitem -->
			{#	{{hierarchy( bone_name, bone, Skel.value[bone_name] ) }} #}				
			{%- else -%}<!--Defaultbonerenderer -->
				{{ render_custombone( bone_name,bone,Skel.value[bone_name] ) }}
			{%- endif -%}
			{% if debug %}
				<br /><br /><textarea>{{bone}}</textarea>
			{% endif %}
	
		{% if bone.visible %}
			</dd>
		{% endif %}
	{%- endif -%}
{% endmacro %}

