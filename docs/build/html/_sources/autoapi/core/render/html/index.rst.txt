:mod:`core.render.html`
=======================

.. py:module:: core.render.html


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   env/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   default/index.rst
   user/index.rst
   utils/index.rst
   wrap/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   core.render.html.default
   core.render.html.user



.. class:: default(parent=None, *args, **kwargs)


   Bases: :class:`object`

   The core jinja2 render.

   This is the bridge between your ViUR modules and your templates.
   First, the default jinja2-api is exposed to your templates. See http://jinja.pocoo.org/ for
   more information. Second, we'll pass data das global variables to templates depending on the
   current action.

           - For list() we'll pass `skellist` - a :py:class:`server.render.jinja2.default.SkelListWrapper` instance
           - For view(): skel - a dictionary with values from the skeleton prepared for use inside html
           - For add()/edit: a dictionary as `skel` with `values`, `structure` and `errors` as keys.

   Third, a bunch of global filters (like urlencode) and functions (getEntry, ..) are available  to templates.

   See the ViUR Documentation for more information about functions and data available to jinja2 templates.

   Its possible for modules to extend the list of filters/functions available to templates by defining
   a function called `jinjaEnv`. Its called from the render when the environment is first created and
   can extend/override the functionality exposed to templates.

   .. attribute:: kind
      :annotation: = html

      

   .. attribute:: listTemplate
      :annotation: = list

      

   .. attribute:: viewTemplate
      :annotation: = view

      

   .. attribute:: addTemplate
      :annotation: = add

      

   .. attribute:: editTemplate
      :annotation: = edit

      

   .. attribute:: addSuccessTemplate
      :annotation: = add_success

      

   .. attribute:: editSuccessTemplate
      :annotation: = edit_success

      

   .. attribute:: deleteSuccessTemplate
      :annotation: = delete_success

      

   .. attribute:: listRepositoriesTemplate
      :annotation: = list_repositories

      

   .. attribute:: listRootNodeContentsTemplate
      :annotation: = list_rootNode_contents

      

   .. attribute:: addDirSuccessTemplate
      :annotation: = add_dir_success

      

   .. attribute:: renameSuccessTemplate
      :annotation: = rename_success

      

   .. attribute:: copySuccessTemplate
      :annotation: = copy_success

      

   .. attribute:: reparentSuccessTemplate
      :annotation: = reparent_success

      

   .. attribute:: setIndexSuccessTemplate
      :annotation: = setindex_success

      

   .. attribute:: cloneSuccessTemplate
      :annotation: = clone_success

      

   .. attribute:: __haveEnvImported_
      :annotation: = False

      

   .. method:: getTemplateFileName(self, template, ignoreStyle=False)

      Returns the filename of the template.

      This function decides in which language and which style a given template is rendered.
      The style is provided as get-parameters for special-case templates that differ from
      their usual way.

      It is advised to override this function in case that
      :func:`server.render.jinja2.default.Render.getLoaders` is redefined.

      :param template: The basename of the template to use.
      :type template: str

      :param ignoreStyle: Ignore any maybe given style hints.
      :type ignoreStyle: bool

      :returns: Filename of the template
      :rtype: str


   .. method:: getLoaders(self)

      Return the list of Jinja2 loaders which should be used.

      May be overridden to provide an alternative loader
      (e.g. for fetching templates from the datastore).


   .. method:: renderBoneStructure(self, bone)

      Renders the structure of a bone.

      This function is used by :func:`renderSkelStructure`.
      can be overridden and super-called from a custom renderer.

      :param bone: The bone which structure should be rendered.
      :type bone: Any bone that inherits from :class:`server.bones.base.baseBone`.

      :return: A dict containing the rendered attributes.
      :rtype: dict


   .. method:: renderSkelStructure(self, skel)

      Dumps the structure of a :class:`server.db.skeleton.Skeleton`.

      :param skel: Skeleton which structure will be processed.
      :type skel: server.db.skeleton.Skeleton

      :returns: The rendered dictionary.
      :rtype: dict


   .. method:: renderBoneValue(self, bone, skel, key, boneValue, isLanguageWrapped: bool = False)

      Renders the value of a bone.

      This function is used by :func:`collectSkelData`.
      It can be overridden and super-called from a custom renderer.

      :param bone: The bone which value should be rendered.
      :type bone: Any bone that inherits from :class:`server.bones.base.baseBone`.

      :return: A dict containing the rendered attributes.
      :rtype: dict


   .. method:: collectSkelData(self, skel)

      Prepares values of one :class:`server.db.skeleton.Skeleton` or a list of skeletons for output.

      :param skel: Skeleton which contents will be processed.
      :type skel: server.db.skeleton.Skeleton

      :returns: A dictionary or list of dictionaries.
      :rtype: dict | list


   .. method:: add(self, skel, tpl=None, params=None, *args, **kwargs)

      Renders a page for adding an entry.

      The template must construct the HTML-form on itself; the required information
      are passed via skel.structure, skel.value and skel.errors.

      A jinja2-macro, which builds such kind of forms, is shipped with the server.

      Any data in \*\*kwargs is passed unmodified to the template.

      :param skel: Skeleton of the entry which should be created.
      :type skel: server.db.skeleton.Skeleton

      :param tpl: Name of a different template, which should be used instead of the default one.
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: edit(self, skel, tpl=None, params=None, **kwargs)

      Renders a page for modifying an entry.

      The template must construct the HTML-form on itself; the required information
      are passed via skel.structure, skel.value and skel.errors.

      A jinja2-macro, which builds such kind of forms, is shipped with the server.

      Any data in \*\*kwargs is passed unmodified to the template.

      :param skel: Skeleton of the entry which should be modified.
      :type skel: server.db.skeleton.Skeleton

      :param tpl: Name of a different template, which should be used instead of the default one.
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: addSuccess(self, skel, tpl=None, params=None, *args, **kwargs)

      Renders a page, informing that the entry has been successfully created.

      :param skel: Skeleton which contains the data of the new entity
      :type skel: server.db.skeleton.Skeleton

      :param tpl: Name of a different template, which should be used instead of the default one.
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: editSuccess(self, skel, tpl=None, params=None, *args, **kwargs)

      Renders a page, informing that the entry has been successfully modified.

      :param skel: Skeleton which contains the data of the modified entity
      :type skel: server.db.skeleton.Skeleton

      :param tpl: Name of a different template, which should be used instead of the default one.
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: deleteSuccess(self, skel, tpl=None, params=None, *args, **kwargs)

      Renders a page, informing that the entry has been successfully deleted.

      The provided parameters depend on the application calling this:
      List and Hierarchy pass the id of the deleted entry, while Tree passes
      the rootNode and path.

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :param tpl: Name of a different template, which should be used instead of the default one.
      :type tpl: str

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: list(self, skellist, tpl=None, params=None, **kwargs)

      Renders a list of entries.

      Any data in \*\*kwargs is passed unmodified to the template.

      :param skellist: List of Skeletons with entries to display.
      :type skellist: server.db.skeleton.SkelList

      :param tpl: Name of a different template, which should be used instead of the default one.
      :param: tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: listRootNodes(self, repos, tpl=None, params=None, **kwargs)

      Renders a list of available repositories.

      :param repos: List of repositories (dict with "key"=>Repo-Key and "name"=>Repo-Name)
      :type repos: list

      :param tpl: Name of a different template, which should be used instead of the default one.
      :param: tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: view(self, skel, tpl=None, params=None, **kwargs)

      Renders a single entry.

      Any data in \*\*kwargs is passed unmodified to the template.

      :param skel: Skeleton to be displayed.
      :type skellist: server.db.skeleton.Skeleton

      :param tpl: Name of a different template, which should be used instead of the default one.
      :param: tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: listRootNodeContents(self, subdirs, entries, tpl=None, params=None, **kwargs)

      Renders the contents of a given RootNode.

      This differs from list(), as one level in the tree-application may contains two different
      child-types: Entries and folders.

      :param subdirs: List of (sub-)directories on the current level
      :type repos: list

      :param entries: List of entries of the current level
      :type entries: server.db.skeleton.SkelList

      :param tpl: Name of a different template, which should be used instead of the default one
      :param: tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: addDirSuccess(self, rootNode, path, dirname, params=None, *args, **kwargs)

      Renders a page, informing that the directory has been successfully created.

      :param rootNode: RootNode-key in which the directory has been created
      :type rootNode: str

      :param path: Path in which the directory has been created
      :type path: str

      :param dirname: Name of the newly created directory
      :type dirname: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: renameSuccess(self, rootNode, path, src, dest, params=None, *args, **kwargs)

      Renders a page, informing that the entry has been successfully renamed.

      :param rootNode: RootNode-key in which the entry has been renamed
      :type rootNode: str

      :param path: Path in which the entry has been renamed
      :type path: str

      :param src: Old name of the entry
      :type src: str

      :param dest: New name of the entry
      :type dest: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: copySuccess(self, srcrepo, srcpath, name, destrepo, destpath, type, deleteold, params=None, *args, **kwargs)

      Renders a page, informing that an entry has been successfully copied/moved.

      :param srcrepo: RootNode-key from which has been copied/moved
      :type srcrepo: str

      :param srcpath: Path from which the entry has been copied/moved
      :type srcpath: str

      :param name: Name of the entry which has been copied/moved
      :type name: str

      :param destrepo: RootNode-key to which has been copied/moved
      :type destrepo: str

      :param destpath: Path to which the entries has been copied/moved
      :type destpath: str

      :param type: "entry": Copy/Move an entry, everything else: Copy/Move an directory
      :type type: str

      :param deleteold: "0": Copy, "1": Move
      :type deleteold: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: reparentSuccess(self, obj, tpl=None, params=None, **kwargs)

      Renders a page informing that the item was successfully moved.

      :param obj: ndb.Expando instance of the item that was moved.
      :type obj: ndb.Expando

      :param tpl: Name of a different template, which should be used instead of the default one
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object


   .. method:: setIndexSuccess(self, obj, tpl=None, params=None, *args, **kwargs)

      Renders a page informing that the items sortindex was successfully changed.

      :param obj: ndb.Expando instance of the item that was changed
      :type obj: ndb.Expando

      :param tpl: Name of a different template, which should be used instead of the default one
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: cloneSuccess(self, tpl=None, params=None, *args, **kwargs)

      Renders a page informing that the items sortindex was successfully changed.

      :param obj: ndb.Expando instance of the item that was changed
      :type obj: ndb.Expando

      :param tpl: Name of a different template, which should be used instead of the default one
      :type tpl: str

      :param params: Optional data that will be passed unmodified to the template
      :type params: object

      :return: Returns the emitted HTML response.
      :rtype: str


   .. method:: renderEmail(self, dests: List[str], file: str = None, template: str = None, skel: Union[(None, Dict, SkeletonInstance, List[SkeletonInstance])] = None, **kwargs) -> Tuple[(str, str)]

      Renders an email.
      Uses the first not-empty line as subject and the remaining template as body.

      :param dests: Destination recipients.
      :param file: The name of a template from the deploy/emails directory.
      :param template: This string is interpreted as the template contents. Alternative to load from template file.
      :param skel: Skeleton or dict which data to supply to the template.
      :return: Returns the rendered email subject and body.


   .. method:: getEnv(self)

      Constucts the Jinja2 environment.

      If an application specifies an jinja2Env function, this function
      can alter the environment before its used to parse any template.

      :returns: Extended Jinja2 environment.
      :rtype: jinja2.Environment



.. class:: user(parent=None, *args, **kwargs)


   Bases: :class:`core.render.html.default`

   The core jinja2 render.

   This is the bridge between your ViUR modules and your templates.
   First, the default jinja2-api is exposed to your templates. See http://jinja.pocoo.org/ for
   more information. Second, we'll pass data das global variables to templates depending on the
   current action.

           - For list() we'll pass `skellist` - a :py:class:`server.render.jinja2.default.SkelListWrapper` instance
           - For view(): skel - a dictionary with values from the skeleton prepared for use inside html
           - For add()/edit: a dictionary as `skel` with `values`, `structure` and `errors` as keys.

   Third, a bunch of global filters (like urlencode) and functions (getEntry, ..) are available  to templates.

   See the ViUR Documentation for more information about functions and data available to jinja2 templates.

   Its possible for modules to extend the list of filters/functions available to templates by defining
   a function called `jinjaEnv`. Its called from the render when the environment is first created and
   can extend/override the functionality exposed to templates.

   .. attribute:: loginTemplate
      :annotation: = user_login

      

   .. attribute:: loginChoicesTemplate
      :annotation: = user_login_choices

      

   .. attribute:: logoutSuccessTemplate
      :annotation: = user_logout_success

      

   .. attribute:: loginSuccessTemplate
      :annotation: = user_login_success

      

   .. attribute:: verifySuccessTemplate
      :annotation: = user_verify_success

      

   .. attribute:: verifyFailedTemplate
      :annotation: = user_verify_failed

      

   .. attribute:: passwdRecoverInfoTemplate
      :annotation: = user_passwdrecover_info

      

   .. method:: login_disabled(self, authMethods, tpl=None, **kwargs)


   .. method:: login(self, skel, tpl=None, **kwargs)


   .. method:: loginChoices(self, authMethods, tpl=None, **kwargs)


   .. method:: loginSucceeded(self, tpl=None, **kwargs)


   .. method:: logoutSuccess(self, tpl=None, **kwargs)


   .. method:: verifySuccess(self, skel, tpl=None, **kwargs)


   .. method:: verifyFailed(self, tpl=None, **kwargs)


   .. method:: passwdRecoverInfo(self, msg, skel=None, tpl=None, **kwargs)


   .. method:: passwdRecover(self, *args, **kwargs)



