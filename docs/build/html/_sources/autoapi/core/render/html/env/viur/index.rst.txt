:mod:`core.render.html.env.viur`
================================

.. py:module:: core.render.html.env.viur


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   core.render.html.env.viur.execRequest
   core.render.html.env.viur.getCurrentUser
   core.render.html.env.viur.getSkel
   core.render.html.env.viur.getHostUrl
   core.render.html.env.viur.redirect
   core.render.html.env.viur.getLanguage
   core.render.html.env.viur.moduleName
   core.render.html.env.viur.modulePath
   core.render.html.env.viur.getList
   core.render.html.env.viur.getSecurityKey
   core.render.html.env.viur.getStructure
   core.render.html.env.viur.requestParams
   core.render.html.env.viur.updateURL
   core.render.html.env.viur.fileSize
   core.render.html.env.viur.urlencode
   core.render.html.env.viur.shortKey
   core.render.html.env.viur.renderEditBone
   core.render.html.env.viur.renderEditForm
   core.render.html.env.viur.embedSvg
   core.render.html.env.viur.downloadUrlFor
   core.render.html.env.viur.srcSetFor
   core.render.html.env.viur.seoUrlForEntry
   core.render.html.env.viur.seoUrlToFunction


.. function:: execRequest(render, path, *args, **kwargs)

   Jinja2 global: Perform an internal Request.

   This function allows to embed the result of another request inside the current template.
   All optional parameters are passed to the requested resource.

   :param path: Local part of the url, e.g. user/list. Must not start with an /.
   Must not include an protocol or hostname.
   :type path: str

   :returns: Whatever the requested resource returns. This is *not* limited to strings!


.. function:: getCurrentUser(render)

   Jinja2 global: Returns the current user from the session, or None if not logged in.

   :return: A dict containing user data. Returns None if no user data is available.
   :rtype: dict


.. function:: getSkel(render, module, key=None, skel='viewSkel')

   Jinja2 global: Fetch an entry from a given module, and return the data as a dict,
   prepared for direct use in the output.

   It is possible to specify a different data-model as the one used for rendering
   (e.g. an editSkel).

   :param module: Name of the module, from which the data should be fetched.
   :type module: str

   :param key: Requested entity-key in an urlsafe-format. If the module is a Singleton
   application, the parameter can be omitted.
   :type key: str

   :param skel: Specifies and optionally different data-model
   :type skel: str

   :returns: dict on success, False on error.
   :rtype: dict | bool


.. function:: getHostUrl(render, forceSSL=False, *args, **kwargs)

   Jinja2 global: Retrieve hostname with protocol.

   :returns: Returns the hostname, including the currently used protocol, e.g: http://www.example.com
   :rtype: str


.. function:: redirect(render, url)

   Jinja2 global: Redirect to another URL.

   :param url: URL to redirect to.
   :type url: str


.. function:: getLanguage(render, resolveAlias=False)

   Jinja2 global: Returns the language used for this request.

   :param resolveAlias: If True, the function tries to resolve the current language
   using conf["viur.languageAliasMap"].
   :type resolveAlias: bool


.. function:: moduleName(render)

   Jinja2 global: Retrieve name of current module where this renderer is used within.

   :return: Returns the name of the current module, or empty string if there is no module set.


.. function:: modulePath(render)

   Jinja2 global: Retrieve path of current module the renderer is used within.

   :return: Returns the path of the current module, or empty string if there is no module set.


.. function:: getList(render, module, skel='viewSkel', _noEmptyFilter=False, *args, **kwargs)

   Jinja2 global: Fetches a list of entries which match the given filter criteria.

   :param module: Name of the module from which list should be fetched.
   :type module: str

   :param skel: Name of the skeleton that is used to fetching the list.
   :type skel: str

   :param _noEmptyFilter: If True, this function will not return any results if at least one
   parameter is an empty list. This is useful to prevent filtering (e.g. by key) not being
   performed because the list is empty.
   :type _noEmptyFilter: bool

   :returns: Returns a dict that contains the "skellist" and "cursor" information,
   or None on error case.
   :rtype: dict


.. function:: getSecurityKey(render, **kwargs)

   Jinja2 global: Creates a new ViUR security key.


.. function:: getStructure(render, module, skel='viewSkel', subSkel=None)

   Jinja2 global: Returns the skeleton structure instead of data for a module.

   :param module: Module from which the skeleton is retrieved.
   :type module: str

   :param skel: Name of the skeleton.
   :type skel: str

   :param subSkel: If set, return just that subskel instead of the whole skeleton
   :type subSkel: str or None


.. function:: requestParams(render)

   Jinja2 global: Allows for accessing the request-parameters from the template.

   These returned values are escaped, as users tend to use these in an unsafe manner.

   :returns: dict of parameter and values.
   :rtype: dict


.. function:: updateURL(render, **kwargs)

   Jinja2 global: Constructs a new URL based on the current requests url.

   Given parameters are replaced if they exists in the current requests url, otherwise there appended.

   :returns: Returns a well-formed URL.
   :rtype: str


.. function:: fileSize(render, value, binary=False)

   Jinja2 filter: Format the value in an 'human-readable' file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc).
   Per default, decimal prefixes are used (Mega, Giga, etc.). When the second parameter is set to True,
   the binary prefixes are used (Mebi, Gibi).

   :param value: Value to be calculated.
   :type value: int | float

   :param binary: Decimal prefixes behavior
   :type binary: bool

   :returns: The formatted file size string in human readable format.
   :type: str


.. function:: urlencode(render, val)

   Jinja2 filter: Make a string URL-safe.

   :param val: String to be quoted.
   :type val: str

   :returns: Quoted string.
   :rtype: str


.. function:: shortKey(render, val)

   Jinja2 filter: Make a shortkey from an entity-key.

   :param val: Entity-key as string.
   :type val: str

   :returns: Shortkey on success, None on error.
   :rtype: str


.. function:: renderEditBone(render, skel, boneName)


.. function:: renderEditForm(render, skel, ignore=None, hide=None)


.. function:: embedSvg(render, name: str, classes: Union[(List[str], None)] = None, **kwargs: Dict[(str, str)]) -> str

   jinja2 function to get an <img/>-tag for a SVG.
   This method will not check the existence of a SVG!

   :param render: The jinja renderer instance
   :param name: Name of the icon (basename of file)
   :param classes: A list of css-classes for the <img/>-tag
   :param kwargs: Further html-attributes for this tag (e.g. "alt" or "title")
   :return: A <img/>-tag


.. function:: downloadUrlFor(render, fileObj, expires, derived=None)


.. function:: srcSetFor(render, fileObj, expires)


.. function:: seoUrlForEntry(render, *args, **kwargs)


.. function:: seoUrlToFunction(render, *args, **kwargs)


