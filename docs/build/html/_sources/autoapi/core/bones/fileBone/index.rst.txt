:mod:`core.bones.fileBone`
==========================

.. py:module:: core.bones.fileBone


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.bones.fileBone.fileBone



Functions
~~~~~~~~~

.. autoapisummary::

   core.bones.fileBone.ensureDerived


.. function:: ensureDerived(key: viur.core.db.KeyClass, srcKey, deriveMap: Dict[(str, Any)])

   Ensure that pending thumbnails or other derived Files are build
   :param key: DB-Key of the file-object on which we should update the derivemap
   :param srcKey: Prefix for a (hopefully) stable key to prevent rebuilding derives over and over again
   :param deriveMap: List of DeriveDicts we should build/update


.. class:: fileBone(format='$(dest.name)', derive: Union[(None, Dict[str, Any])] = None, validMimeTypes: Union[(None, List[str])] = None, maxFileSize: Union[(None, int)] = None, *args, **kwargs)


   Bases: :class:`viur.core.bones.treeLeafBone`

   .. attribute:: kind
      :annotation: = file

      

   .. attribute:: type
      :annotation: = relational.tree.leaf.file

      

   .. attribute:: refKeys
      :annotation: = ['name', 'key', 'mimetype', 'dlkey', 'size', 'width', 'height', 'derived']

      

   .. method:: isInvalid(self, value)


   .. method:: postSavedHandler(self, skel, boneName, key)


   .. method:: getReferencedBlobs(self, skel, name)


   .. method:: refresh(self, skel, boneName)



