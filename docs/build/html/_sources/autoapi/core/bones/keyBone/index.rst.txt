:mod:`core.bones.keyBone`
=========================

.. py:module:: core.bones.keyBone


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.bones.keyBone.keyBone



.. class:: keyBone(descr='Key', readOnly=True, visible=False, **kwargs)


   Bases: :class:`viur.core.bones.bone.baseBone`

   .. attribute:: type
      :annotation: = key

      

   .. method:: unserialize(self, skel: viur.core.skeleton.SkeletonValues, name: str) -> bool

      Inverse of serialize. Evaluates whats
      read from the datastore and populates
      this bone accordingly.
      :param name: The property-name this bone has in its Skeleton (not the description!)
      :type name: str
      :param expando: An instance of the dictionary-like db.Entity class
      :type expando: db.Entity
      :returns: bool


   .. method:: serialize(self, skel: SkeletonInstance, name: str, parentIndexed: bool) -> bool

      Serializes this bone into something we
      can write into the datastore.

      :param name: The property-name this bone has in its Skeleton (not the description!)
      :type name: str
      :returns: dict


   .. method:: buildDBFilter(self, name, skel, dbFilter, rawFilter, prefix=None)

      Parses the searchfilter a client specified in his Request into
      something understood by the datastore.
      This function must:

              * Ignore all filters not targeting this bone
              * Safely handle malformed data in rawFilter
                      (this parameter is directly controlled by the client)

      :param name: The property-name this bone has in its Skeleton (not the description!)
      :type name: str
      :param skel: The :class:`server.db.Query` this bone is part of
      :type skel: :class:`server.skeleton.Skeleton`
      :param dbFilter: The current :class:`server.db.Query` instance the filters should be applied to
      :type dbFilter: :class:`server.db.Query`
      :param rawFilter: The dictionary of filters the client wants to have applied
      :type rawFilter: dict
      :returns: The modified :class:`server.db.Query`



