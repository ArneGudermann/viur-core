:mod:`core.bones.captchaBone`
=============================

.. py:module:: core.bones.captchaBone


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.bones.captchaBone.captchaBone



.. class:: captchaBone(publicKey=None, privateKey=None, *args, **kwargs)


   Bases: :class:`viur.core.bones.bone.baseBone`

   .. attribute:: type
      :annotation: = captcha

      

   .. method:: serialize(self, skel: SkeletonInstance, name: str, parentIndexed: bool) -> bool


   .. method:: unserialize(self, skel, name) -> bool


   .. method:: fromClient(self, skel: SkeletonInstance, name: str, data: dict) -> Union[(None, List[ReadFromClientError])]

      Reads a value from the client.
      If this value is valid for this bone,
      store this value and return None.
      Otherwise our previous value is
      left unchanged and an error-message
      is returned.

      :param name: Our name in the skeleton
      :type name: str
      :param data: *User-supplied* request-data
      :type data: dict
      :returns: None or String



