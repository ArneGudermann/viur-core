:mod:`core.indexes`
===================

.. py:module:: core.indexes


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.indexes.IndexMannager



.. class:: IndexMannager(pageSize=10, maxPages=100)


   Allows efficient pagination for a small specified set of queries.
   This works *only* if the number of different querys is limited.
   Otherwise use the built-in page parameter for small result-sets and few pages.
   If you have lots of different querys and large result-sets you can only generate next/previous links on the fly.

   .. Note::

           The refreshAll Method is missing - intentionally. Whenever data changes you have to call
           refreshIndex for each affected Index. As long as you can name them, their number is
           limited and everything is fine :)

   .. attribute:: _dbType
      :annotation: = viur_indexes

      

   .. method:: keyFromQuery(self, query)

      Derives a unique Database-Key from a given query.
      This Key is stable regardless in which order the filter have been applied

      :param query: Query to derive key from
      :type query: DB.Query
      :returns: str


   .. method:: getOrBuildIndex(self, origQuery)

      Builds a specific index based on origQuery AND local variables (self.indexPage and self.indexMaxPage)
      Returns a list of starting-cursors for each page.
      You probably shouldn't call this directly. Use cursorForQuery.

      :param origQuery: Query to build the index for
      :type origQuery: db.Query
      :returns: []


   .. method:: cursorForQuery(self, query, page)

      Returns the starting-cursor for the given query and page using an index.

      .. WARNING:

              Make sure the maximum count of different querys are limited!
              If an attacker can choose the query freely, he can consume a lot
              datastore quota per request!

      :param query: Query to get the cursor for
      :type query: db.Query
      :param page: Page the user wants to retrieve
      :type page: int
      :returns: Cursor (type: str) or None if no cursor is applicable


   .. method:: getPages(self, query)

      Returns a list of all starting-cursors for this query.
      The first element is always None as the first page doesn't
      have any start-cursor


   .. method:: refreshIndex(self, query)

      Refreshes the Index for the given query
      (Actually it removes it from the db so it gets rebuild on next use)

      :param query: Query for which the index should be refreshed
      :type query: db.Query



