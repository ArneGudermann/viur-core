:mod:`core.session`
===================

.. py:module:: core.session


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.session.GaeSession



Functions
~~~~~~~~~

.. autoapisummary::

   core.session.killSessionByUser
   core.session.startClearSessions
   core.session.doClearSessions


.. class:: GaeSession

   Store Sessions inside the Big Table/Memcache

   .. attribute:: kindName
      :annotation: = viur-session

      

   .. attribute:: sameSite
      :annotation: = lax

      

   .. attribute:: sessionCookie
      :annotation: = True

      

   .. attribute:: cookieName
      

      

   .. method:: load(self, req)

      Initializes the Session.

      If the client supplied a valid Cookie, the session is read
      from the memcache/datastore, otherwise a new, empty session
      will be initialized.


   .. method:: save(self, req)

      Writes the session to the memcache/datastore.

      Does nothing, if the session hasn't been changed in the current request.


   .. method:: __contains__(self, key)

      Returns True if the given *key* is set in the current session.


   .. method:: __delitem__(self, key)

      Removes a *key* from the session.

      This key must exist.


   .. method:: __getitem__(self, key)

      Returns the value stored under the given *key*.

      The key must exist.


   .. method:: get(self, key)

      Returns the value stored under the given key.

      :param key: Key to retrieve from the session variables.
      :type key: str

      :return: Returns None if the key doesn't exist.


   .. method:: __setitem__(self, key, item)

      Stores a new value under the given key.

      If that key exists before, its value is
      overwritten.


   .. method:: markChanged(self)

      Explicitly mark the current session as changed.
      This will force save() to write into the memcache /
      datastore, even if it belives that this session had
      not changed.


   .. method:: reset(self)

      Invalids the current session and starts a new one.

      This function is especially useful at login, where
      we might need to create an SSL-capable session.

      :warning: Everything (except the current language) is flushed.


   .. method:: items(self)

      Returns all items in the current session.


   .. method:: getSecurityKey(self)


   .. method:: validateSecurityKey(self, key)

      Checks if key matches the current CSRF-Token of our session. On success, a new key is generated.


   .. method:: validateStaticSecurityKey(self, key)

      Checks if key matches the current *static* CSRF-Token of our session.



.. function:: killSessionByUser(user=None)

   Invalidates all active sessions for the given *user*.

   This means that this user is instantly logged out.
   If no user is given, it tries to invalidate **all** active sessions.

   Use "guest" as to kill all sessions not associated with an user.

   :param user: UserID, "guest" or None.
   :type user: str | None


.. function:: startClearSessions()

   Removes old (expired) Sessions


.. function:: doClearSessions(timeStamp, cursor)


