:mod:`core`
===========

.. py:module:: core

.. autoapi-nested-parse::

   iii
                  iii
                 iii

             vvv iii uu      uu rrrrrrrr
            vvvv iii uu      uu rr     rr
    v      vvvv  iii uu      uu rr     rr
    vv    vvvv   iii uu      uu rr rrrrr
   vvvv  vvvv    iii uu      uu rr rrr
    vvv vvvv     iii uu      uu rr  rrr
     vvvvvv      iii  uu    uu  rr   rrr
      vvvv       iii   uuuuuu   rr    rrr

     I N F O R M A T I O N    S Y S T E M

   ViUR SERVER
   Copyright 2012-2019 by Mausbrand Informationssysteme GmbH

   ViUR is a free software development framework for the Google App Engineâ„¢.
   More about ViUR can be found at https://www.viur.is/.

   Licensed under the GNU Lesser General Public License, version 3.
   See file LICENSE for more information.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   bones/index.rst
   languages/index.rst
   modules/index.rst
   prototypes/index.rst
   render/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cache/index.rst
   config/index.rst
   db/index.rst
   dbtransfer/index.rst
   email/index.rst
   errors/index.rst
   i18n/index.rst
   indexes/index.rst
   logging/index.rst
   ratelimit/index.rst
   request/index.rst
   securityheaders/index.rst
   securitykey/index.rst
   session/index.rst
   skeleton/index.rst
   tasks/index.rst
   utils/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   core.setDefaultLanguage
   core.setDefaultDomainLanguage
   core.mapModule
   core.buildApp
   core.setup
   core.app
   core.forceSSL
   core.forcePost
   core.exposed
   core.internalExposed


.. data:: __version__
   

   

.. function:: setDefaultLanguage(lang)

   Configures default language to *lang*.

   :param lang: Name of the language module to use by default.
   :type lang: str


.. function:: setDefaultDomainLanguage(domain, lang)


.. function:: mapModule(moduleObj: object, moduleName: str, targetResoveRender: dict)

   Maps each function that's exposed of moduleObj into the branch of `prop:server.conf["viur.mainResolver"]`
   that's referenced by `prop:targetResoveRender`. Will also walk `prop:_viurMapSubmodules` if set
   and map these sub-modules also.


.. function:: buildApp(config, renderers, default=None, *args, **kwargs)

   Creates the application-context for the current instance.

   This function converts the classes found in the *modules*-module,
   and the given renders into the object found at ``conf["viur.mainApp"]``.

   Every class found in *modules* becomes

   - instanced
   - get the corresponding renderer attached
   - will be attached to ``conf["viur.mainApp"]``

   :param config: Usually the module provided as *modules* directory within the application.
   :type config: module | object
   :param renders: Usually the module *server.renders*, or a dictionary renderName => renderClass.
   :type renders: module | dict
   :param default: Name of the renderer, which will form the root of the application.              This will be the renderer, which wont get a prefix, usually jinja2.             (=> /user instead of /jinja2/user)
   :type default: str


.. function:: setup(modules, render=None, default='html')

   Define whats going to be served by this instance.

   :param config: Usually the module provided as *modules* directory within the application.
   :type config: module | object
   :param renders: Usually the module *server.renders*, or a dictionary renderName => renderClass.
   :type renders: module | dict
   :param default: Name of the renderer, which will form the root of the application.              This will be the renderer, which wont get a prefix, usually html.               (=> /user instead of /html/user)
   :type default: str


.. function:: app(environ, start_response)


.. function:: forceSSL(f)

   Decorator, which forces usage of an encrypted Channel for a given resource.
   Has no effect on development-servers.


.. function:: forcePost(f)

   Decorator, which forces usage of an http post request.


.. function:: exposed(f)

   Decorator, which marks an function as exposed.

   Only exposed functions are callable by http-requests.
   Can optionally receive a dict of language->translated name to make that function
   available under different names


.. function:: internalExposed(f)

   Decorator, marks an function as internal exposed.

   Internal exposed functions are not callable by external http-requests,
   but can be called by templates using ``execRequest()``.


