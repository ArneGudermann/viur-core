:mod:`core.prototypes`
======================

.. py:module:: core.prototypes


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   basic/index.rst
   list/index.rst
   singleton/index.rst
   tree/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   core.prototypes.BasicApplication
   core.prototypes.List
   core.prototypes.Singleton
   core.prototypes.Tree
   core.prototypes.TreeSkel



.. class:: BasicApplication(moduleName, modulePath, *args, **kwargs)


   Bases: :class:`object`

   BasicApplication is a generic class serving as the base for the four BasicApplications.

   :ivar kindName: Name of the kind of data entities that are managed by the application.  This information is used to bind a specific :class:`server.skeleton.Skeleton`-class to the      application. For more information, refer to the function :func:`_resolveSkel`.
   :vartype kindName: str

   :ivar render: will be set to the appropriate render instance at runtime

   .. attribute:: kindName
      

      

   .. attribute:: adminInfo
      

      

   .. attribute:: accessRights
      

      

   .. method:: _resolveSkelCls(self, *args, **kwargs)

      Retrieve the generally associated :class:`server.skeleton.Skeleton` that is used by
      the application.

      This is either be defined by the member variable *kindName* or by a Skeleton named like the
      application class in lower-case order.

      If this behavior is not wanted, it can be definitely overridden by defining module-specific
      :func:`viewSkel`,:func:`addSkel`, or :func:`editSkel` functions, or by overriding this
      function in general.

      :return: Returns a Skeleton instance that matches the application.
      :rtype: server.skeleton.Skeleton



.. class:: List(moduleName, modulePath, *args, **kwargs)


   Bases: :class:`viur.core.prototypes.BasicApplication`

   List is a ViUR BasicApplication.

   It is used for multiple data entities of the same kind, and needs to be sub-classed for individual
   modules.

   :ivar kindName: Name of the kind of data entities that are managed by the application.  This information is used to bind a specific :class:`server.skeleton.Skeleton`-class to the      application. For more information, refer to the function :func:`_resolveSkel`.
   :vartype kindName: str

   :ivar adminInfo: todo short info on how to use adminInfo.
   :vartype adminInfo: dict | callable

   .. attribute:: accessRights
      :annotation: = ['add', 'edit', 'view', 'delete']

      

   .. method:: adminInfo(self)


   .. method:: viewSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for viewing an existing entry from the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`addSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for viewing an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: addSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for adding an entry to the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for adding an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: editSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for editing an existing entry from the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for editing an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: preview(self, skey, *args, **kwargs)

      Renders data for an entry, without reading from the database.
      This function allows to preview an entry without writing it to the database.

      Any entity values are provided via *kwargs*.

      The function uses the viewTemplate of the application.

      :returns: The rendered representation of the the supplied data.


   .. method:: view(self, *args, **kwargs)

      Prepares and renders a single entry for viewing.

      The entry is fetched by its entity key, which either is provided via *kwargs["key"]*,
      or as the first parameter in *args*. The function performs several access control checks
      on the requested entity before it is rendered.

      .. seealso:: :func:`viewSkel`, :func:`canView`, :func:`onView`

      :returns: The rendered representation of the requested entity.

      :raises: :exc:`server.errors.NotAcceptable`, when no *key* is provided.
      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: list(self, *args, **kwargs)

      Prepares and renders a list of entries.

      All supplied parameters are interpreted as filters for the elements displayed.

      Unlike other ViUR BasicApplications, the access control in this function is performed
      by calling the function :func:`listFilter`, which updates the query-filter to match only
      elements which the user is allowed to see.

      .. seealso:: :func:`listFilter`, :func:`server.db.mergeExternalFilter`

      :returns: The rendered list objects for the matching entries.

      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: edit(self, *args, **kwargs)

      Modify an existing entry, and render the entry, eventually with error notes on incorrect data.
      Data is taken by any other arguments in *kwargs*.

      The entry is fetched by its entity key, which either is provided via *kwargs["key"]*,
      or as the first parameter in *args*. The function performs several access control checks
      on the requested entity before it is modified.

      .. seealso:: :func:`editSkel`, :func:`onEdit`, :func:`onEdited`, :func:`canEdit`

      :returns: The rendered, edited object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.NotAcceptable`, when no *key* is provided.
      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: add(self, *args, **kwargs)

      Add a new entry, and render the entry, eventually with error notes on incorrect data.
      Data is taken by any other arguments in *kwargs*.

      The function performs several access control checks on the requested entity before it is added.

      .. seealso:: :func:`addSkel`, :func:`onAdd`, :func:`onAdded`, :func:`canAdd`

      :returns: The rendered, added object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: delete(self, key, skey, *args, **kwargs)

      Delete an entry.

      The function runs several access control checks on the data before it is deleted.

      .. seealso:: :func:`canDelete`, :func:`editSkel`, :func:`onDeleted`

      :returns: The rendered, deleted object of the entry.

      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: index(self, *args, **kwargs)

      Default, SEO-Friendly fallback for view and list.

      :param args:
      :param kwargs:
      :return:


   .. method:: getDefaultListParams(self)


   .. method:: listFilter(self, filter)

      Access control function on item listing.

      This function is invoked by the :func:`list` renderer and the related Jinja2 fetching function,
      and is used to modify the provided filter parameter to match only items that the current user
      is allowed to see.

      :param filter: Query which should be altered.
      :type filter: :class:`server.db.Query`

      :returns: The altered filter, or None if access is not granted.
      :type filter: :class:`server.db.Query`


   .. method:: canView(self, skel: viur.core.skeleton.SkeletonInstance) -> bool

      Checks if the current user can view the given entry.
      Should be identical to what's allowed by listFilter.
      By default, `meth:listFilter` is used to determine what's allowed and whats not; but this
      method can be overridden for performance improvements (to eliminate that additional database access).
      :param skel: The entry we check for
      :return: True if the current session is authorized to view that entry, False otherwise


   .. method:: canAdd(self)

      Access control function for adding permission.

      Checks if the current user has the permission to add a new entry.

      The default behavior is:
      - If no user is logged in, adding is generally refused.
      - If the user has "root" access, adding is generally allowed.
      - If the user has the modules "add" permission (module-add) enabled, adding is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`add`

      :returns: True, if adding entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canPreview(self)

      Access control function for preview permission.

      Checks if the current user has the permission to preview an entry.

      The default behavior is:
      - If no user is logged in, previewing is generally refused.
      - If the user has "root" access, previewing is generally allowed.
      - If the user has the modules "add" or "edit" permission (module-add, module-edit) enabled,             previewing is allowed.

      It should be overridden for module-specific behavior.

      .. seealso:: :func:`preview`

      :returns: True, if previewing entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canEdit(self, skel: viur.core.skeleton.SkeletonInstance)

      Access control function for modification permission.

      Checks if the current user has the permission to edit an entry.

      The default behavior is:
      - If no user is logged in, editing is generally refused.
      - If the user has "root" access, editing is generally allowed.
      - If the user has the modules "edit" permission (module-edit) enabled, editing is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`edit`

      :param skel: The Skeleton that should be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      :returns: True, if editing entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canDelete(self, skel: viur.core.skeleton.SkeletonInstance) -> bool

      Access control function for delete permission.

      Checks if the current user has the permission to delete an entry.

      The default behavior is:
      - If no user is logged in, deleting is generally refused.
      - If the user has "root" access, deleting is generally allowed.
      - If the user has the modules "deleting" permission (module-delete) enabled,             deleting is allowed.

      It should be overridden for a module-specific behavior.

      :param skel: The Skeleton that should be deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`

      :returns: True, if deleting entries is allowed, False otherwise.
      :rtype: bool


   .. method:: onAdd(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called before adding an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be added.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`add`, :func:`onAdded`


   .. method:: onAdded(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called after adding an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been added.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`add`, , :func:`onAdd`


   .. method:: onEdit(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called before editing an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdited`


   .. method:: onEdited(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called after modifying an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been modified.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdit`


   .. method:: onView(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called when viewing an entry.

      It should be overridden for a module-specific behavior.
      The default is doing nothing.

      :param skel: The Skeleton that is viewed.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`view`


   .. method:: onDelete(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called before deleting an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`, :func:`onDeleted`


   .. method:: onDeleted(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called after deleting an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`, :func:`onDelete`



.. class:: Singleton(moduleName, modulePath, *args, **kwargs)


   Bases: :class:`viur.core.prototypes.BasicApplication`

   Singleton is a ViUR BasicApplication.

   It is used to store one single data entity, and needs to be sub-classed for individual modules.

   :ivar kindName: Name of the kind of data entities that are managed by the application.  This information is used to bind a specific :class:`server.skeleton.Skeleton`-class to the      application. For more information, refer to the function :func:`_resolveSkel`.
   :vartype kindName: str

   :ivar adminInfo: todo short info on how to use adminInfo.
   :vartype adminInfo: dict | callable

   .. attribute:: accessRights
      :annotation: = ['edit', 'view']

      

   .. method:: adminInfo(self)


   .. method:: getKey(self)

      Returns the DB-Key for the current context.

      This implementation provides one module-global key.
      It *must* return *exactly one* key at any given time in any given context.

      :returns: Current context DB-key
      :rtype: str


   .. method:: viewSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for viewing the existing entry.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`addSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for viewing the singleton entry.
      :rtype: server.skeleton.Skeleton


   .. method:: editSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for editing the existing entry.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for editing the entry.
      :rtype: server.skeleton.Skeleton


   .. method:: preview(self, skey, *args, **kwargs)

      Renders data for the entry, without reading it from the database.
      This function allows to preview the entry without writing it to the database.

      Any entity values are provided via *kwargs*.

      The function uses the viewTemplate of the application.

      :returns: The rendered representation of the supplied data.


   .. method:: view(self, *args, **kwargs)

      Prepares and renders the singleton entry for viewing.

      The function performs several access control checks on the requested entity before it is rendered.

      .. seealso:: :func:`viewSkel`, :func:`canView`, :func:`onView`

      :returns: The rendered representation of the entity.

      :raises: :exc:`server.errors.NotFound`, if there is no singleton entry existing, yet.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: edit(self, *args, **kwargs)

      Modify the existing entry, and render the entry, eventually with error notes on incorrect data.

      The entry is fetched by its entity key, which either is provided via *kwargs["key"]*,
      or as the first parameter in *args*. The function performs several access control checks
      on the singleton's entity before it is modified.

      .. seealso:: :func:`editSkel`, :func:`onEdited`, :func:`canEdit`

      :returns: The rendered, edited object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: getContents(self)

      Returns the entity of this singleton application as :class:`server.skeleton.Skeleton` object.

      :returns: The content as Skeleton provided by :func:`viewSkel`.


   .. method:: canPreview(self)

      Access control function for preview permission.

      Checks if the current user has the permission to preview the singletons entry.

      The default behavior is:
      - If no user is logged in, previewing is generally refused.
      - If the user has "root" access, previewing is generally allowed.
      - If the user has the modules "edit" permission (module-edit) enabled,          previewing is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`preview`

      :returns: True, if previewing entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canEdit(self)

      Access control function for modification permission.

      Checks if the current user has the permission to edit the singletons entry.

      The default behavior is:
      - If no user is logged in, editing is generally refused.
      - If the user has "root" access, editing is generally allowed.
      - If the user has the modules "edit" permission (module-edit) enabled, editing is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`edit`

      :returns: True, if editing is allowed, False otherwise.
      :rtype: bool


   .. method:: canView(self)

      Access control function for viewing permission.

      Checks if the current user has the permission to view the singletons entry.

      The default behavior is:
      - If no user is logged in, viewing is generally refused.
      - If the user has "root" access, viewing is generally allowed.
      - If the user has the modules "view" permission (module-view) enabled, viewing is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`view`

      :param skel: The Skeleton that should be viewed.
      :type skel: :class:`server.skeleton.Skeleton`

      :returns: True, if viewing is allowed, False otherwise.
      :rtype: bool


   .. method:: onEdit(self, skel)

      Hook function that is called before editing an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdited`


   .. method:: onEdited(self, skel)

      Hook function that is called after modifying the entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been modified.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdit`


   .. method:: onView(self, skel)

      Hook function that is called when viewing an entry.

      It should be overridden for a module-specific behavior.
      The default is doing nothing.

      :param skel: The Skeleton that is being viewed.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`view`



.. class:: Tree(moduleName, modulePath, *args, **kwargs)


   Bases: :class:`viur.core.prototypes.BasicApplication`

   Tree is a ViUR BasicApplication.

   In this application, entries are hold in directories, which can be nested. Data in a Tree application
   always consists of nodes (=directories) and leafs (=files).

   :ivar kindName: Name of the kind of data entities that are managed by the application.  This information is used to bind a specific :class:`server.skeleton.Skeleton`-class to the      application. For more information, refer to the function :func:`_resolveSkel`.          In difference to the other ViUR BasicApplication, the kindName in Trees evolve into the kindNames       *kindName + "node"* and *kindName + "leaf"*, because information can be stored in different kinds.
   :vartype kindName: str

   :ivar adminInfo: todo short info on how to use adminInfo.
   :vartype adminInfo: dict | callable

   .. attribute:: accessRights
      :annotation: = ['add', 'edit', 'view', 'delete']

      

   .. attribute:: nodeSkelCls
      

      

   .. attribute:: leafSkelCls
      

      

   .. method:: adminInfo(self)


   .. method:: _checkSkelType(self, skelType: str)


   .. method:: _resolveSkelCls(self, skelType: str, *args, **kwargs)

      Retrieve the generally associated :class:`server.skeleton.Skeleton` that is used by
      the application.

      This is either be defined by the member variable *kindName* or by a Skeleton named like the
      application class in lower-case order.

      If this behavior is not wanted, it can be definitely overridden by defining module-specific
      :func:`viewSkel`,:func:`addSkel`, or :func:`editSkel` functions, or by overriding this
      function in general.

      :return: Returns a Skeleton instance that matches the application.
      :rtype: server.skeleton.Skeleton


   .. method:: viewSkel(self, skelType: str, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for viewing an existing entry from the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`addSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for viewing an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: addSkel(self, skelType: str, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for adding an entry to the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for adding an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: editSkel(self, skelType: str, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for editing an existing entry from the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for editing an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: ensureOwnModuleRootNode(self)

      Ensures, that general root-node for the current module exists.
      If no root-node exists yet, it will be created.

      :returns: The entity of the root-node.
      :rtype: :class:`server.db.Entity`


   .. method:: getAvailableRootNodes(self, *args, **kwargs)

      Default function for providing a list of root node items.
      This list is requested by several module-internal functions and *must* be
      overridden by a custom functionality. The default stub for this function
      returns an empty list.
      An example implementation could be the following:
      .. code-block:: python

                              def getAvailableRootNodes(self, *args, **kwargs):
                                      q = db.Query(self.rootKindName)
                                              ret = [{"key": str(e.key()),
                                                      "name": e.get("name", str(e.key().id_or_name()))}
                                                      for e in q.run(limit=25)]
                                              return ret

      :param args: Can be used in custom implementations.
      :param kwargs: Can be used in custom implementations.
      :return: Returns a list of dicts which must provide a "key" and a "name" entry with                                     respective information.
      :rtype: list of dict


   .. method:: getRootNode(self, entryKey: viur.core.db.KeyClass) -> viur.core.skeleton.Skeleton

      Returns the root-node for a given child.

      :param entryKey: URL-Safe key of the child entry
      :type entryKey: str

      :returns: The entity of the root-node.
      :rtype: :class:`server.db.Entity`


   .. method:: updateParentRepo(self, parentNode: str, newRepoKey: str, depth: int = 0)

      Recursively fixes the parentrepo key after a move operation.

      This will delete all entries which are children of *nodeKey*, except *key* nodeKey.

      :param parentNode: URL-safe key of the node which children should be fixed.
      :param newNode: URL-safe key of the new repository.
      :param depth: Safety level depth preventing infinitive loops.


   .. method:: pathToKey(self, key: viur.core.db.KeyClass)

      Returns the recursively expanded path through the Tree from the root-node to a
      requested node.
      :param key: Key of the destination *node*.
      :returns: An nested dictionary with information about all nodes in the path from root to the requested node.


   .. method:: listRootNodes(self, *args, **kwargs)

      Renders a list of all available repositories for the current user using the
      modules default renderer.

      :returns: The rendered representation of the available root-nodes.
      :rtype: str


   .. method:: list(self, skelType, *args, **kwargs)

      Prepares and renders a list of entries.

      All supplied parameters are interpreted as filters for the elements displayed.

      Unlike other ViUR BasicApplications, the access control in this function is performed
      by calling the function :func:`listFilter`, which updates the query-filter to match only
      elements which the user is allowed to see.

      .. seealso:: :func:`listFilter`, :func:`server.db.mergeExternalFilter`

      :returns: The rendered list objects for the matching entries.

      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: view(self, skelType, key, *args, **kwargs)

      Prepares and renders a single entry for viewing.

      The entry is fetched by its *key* and its *skelType*.
      The function performs several access control checks on the requested entity before it is rendered.

      .. seealso:: :func:`canView`, :func:`onView`

      :returns: The rendered representation of the requested entity.

      :param skelType: May either be "node" or "leaf".
      :type skelType: str
      :param node: URL-safe key of the parent.
      :type node: str

      :raises: :exc:`server.errors.NotAcceptable`, when an incorrect *skelType* is provided.
      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: add(self, skelType, node, *args, **kwargs)

      Add a new entry with the given parent *node*, and render the entry, eventually with error notes
      on incorrect data. Data is taken by any other arguments in *kwargs*.

      The function performs several access control checks on the requested entity before it is added.

      .. seealso:: :func:`canAdd`, :func:`onAdd`, , :func:`onAdded`

      :param skelType: Defines the type of the new entry and may either be "node" or "leaf".
      :type skelType: str
      :param node: URL-safe key of the parent.
      :type node: str

      :returns: The rendered, added object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.NotAcceptable`, when no valid *skelType* was provided.
      :raises: :exc:`server.errors.NotFound`, when no valid *node* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: edit(self, skelType, key, *args, **kwargs)

      Modify an existing entry, and render the entry, eventually with error notes on incorrect data.
      Data is taken by any other arguments in *kwargs*.

      The function performs several access control checks on the requested entity before it is added.

      .. seealso:: :func:`canEdit`, :func:`onEdit`, :func:`onEdited`

      :param skelType: Defines the type of the entry that should be modified and may either be "node" or "leaf".
      :type skelType: str
      :param key: URL-safe key of the item to be edited.
      :type key: str

      :returns: The rendered, modified object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.NotAcceptable`, when no valid *skelType* was provided.
      :raises: :exc:`server.errors.NotFound`, when no valid *node* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: delete(self, skelType, key, *args, **kwargs)

      Deletes an entry or an directory (including its contents).

      The function runs several access control checks on the data before it is deleted.

      .. seealso:: :func:`canDelete`, :func:`onDelete`, :func:`onDeleted`

      :param skelType: Defines the type of the entry that should be deleted and may either be "node" or "leaf".
      :type skelType: str
      :param key: URL-safe key of the item to be deleted.
      :type key: str

      :returns: The rendered, deleted object of the entry.

      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: deleteRecursive(self, nodeKey)

      Recursively processes a delete request.

      This will delete all entries which are children of *nodeKey*, except *key* nodeKey.

      :param key: URL-safe key of the node which children should be deleted.
      :type key: str


   .. method:: move(self, skelType: str, key: str, parentNode: str, *args, **kwargs) -> str

      Move a node (including its contents) or a leaf to another node.

      .. seealso:: :func:`canMove`

      :param skelType: Defines the type of the entry that should be moved and may either be "node" or "leaf".
      :param key: URL-safe key of the item to be moved.
      :param parentNode: URL-safe key of the destination node, which must be a node.

      :returns: The rendered, edited object of the entry.

      :raises: :exc:`viur.core.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`viur.core.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`viur.core.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: listFilter(self, filter)

      Access control function on item listing.

      This function is invoked by the :func:`list` renderer and the related Jinja2 fetching function,
      and is used to modify the provided filter parameter to match only items that the current user
      is allowed to see.

      :param filter: Query which should be altered.
      :type filter: :class:`server.db.Query`

      :returns: The altered filter, or None if access is not granted.
      :type filter: :class:`server.db.Query`


   .. method:: canView(self, skelType: str, skel: viur.core.skeleton.Skeleton) -> bool

      Checks if the current user can view the given entry.
      Should be identical to what's allowed by listFilter.
      By default, `meth:listFilter` is used to determine what's allowed and whats not; but this
      method can be overridden for performance improvements (to eliminate that additional database access).
      :param skel: The entry we check for
      :return: True if the current session is authorized to view that entry, False otherwise


   .. method:: canAdd(self, skelType: str, parentNodeSkel: viur.core.skeleton.Skeleton)

      Access control function for adding permission.

      Checks if the current user has the permission to add a new entry.

      The default behavior is:
      - If no user is logged in, adding is generally refused.
      - If the user has "root" access, adding is generally allowed.
      - If the user has the modules "add" permission (module-add) enabled, adding is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`add`

      :returns: True, if adding entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canEdit(self, skelType: str, skel)

      Access control function for modification permission.

      Checks if the current user has the permission to edit an entry.

      The default behavior is:
      - If no user is logged in, editing is generally refused.
      - If the user has "root" access, editing is generally allowed.
      - If the user has the modules "edit" permission (module-edit) enabled, editing is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`edit`

      :param skel: The Skeleton that should be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      :returns: True, if editing entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canDelete(self, skelType: str, skel)

      Access control function for delete permission.

      Checks if the current user has the permission to delete an entry.

      The default behavior is:
      - If no user is logged in, deleting is generally refused.
      - If the user has "root" access, deleting is generally allowed.
      - If the user has the modules "deleting" permission (module-delete) enabled,             deleting is allowed.

      It should be overridden for a module-specific behavior.

      :param skel: The Skeleton that should be deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`

      :returns: True, if deleting entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canMove(self, skelType: str, node: str, destNode: str) -> bool

      Access control function for moving permission.

      Checks if the current user has the permission to move an entry.

      The default behavior is:
      - If no user is logged in, deleting is generally refused.
      - If the user has "root" access, deleting is generally allowed.
      - If the user has the modules "edit" permission (module-edit) enabled,           moving is allowed.

      It should be overridden for a module-specific behavior.

      :param skelType: Defines the type of the node that shall be deleted.
      :param node: URL-safe key of the node to be moved.
      :param node: URL-safe key of the node where *node* should be moved to.

      .. seealso:: :func:`move`

      :returns: True, if deleting entries is allowed, False otherwise.


   .. method:: onAdd(self, skel)

      Hook function that is called before adding an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be added.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`add`, :func:`onAdded`


   .. method:: onAdded(self, skel)

      Hook function that is called after adding an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been added.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`add`, :func:`onAdd`


   .. method:: onEdit(self, skel)

      Hook function that is called before editing an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdited`


   .. method:: onEdited(self, skel)

      Hook function that is called after modifying an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been modified.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdit`


   .. method:: onView(self, skel)

      Hook function that is called when viewing an entry.

      It should be overridden for a module-specific behavior.
      The default is doing nothing.

      :param skel: The Skeleton that is viewed.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`view`


   .. method:: onDelete(self, skel)

      Hook function that is called before deleting an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`, :func:`onDeleted`


   .. method:: onDeleted(self, skel)

      Hook function that is called after deleting an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      ..warning: Saving the skeleton again will undo the deletion
      (if the skeleton was a leaf or a node with no children).

      :param skel: The Skeleton that has been deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`, :func:`onDelete`



.. class:: TreeSkel

   Bases: :class:`viur.core.skeleton.Skeleton`

   .. attribute:: parententry
      

      

   .. attribute:: parentrepo
      

      

   .. attribute:: sortindex
      

      

   .. method:: preProcessSerializedData(cls, skelValues, entity)
      :classmethod:


   .. method:: refresh(cls, skelValues)
      :classmethod:



