:mod:`core.prototypes.basic`
============================

.. py:module:: core.prototypes.basic


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.prototypes.basic.BasicApplication



.. class:: BasicApplication(moduleName, modulePath, *args, **kwargs)


   Bases: :class:`object`

   BasicApplication is a generic class serving as the base for the four BasicApplications.

   :ivar kindName: Name of the kind of data entities that are managed by the application.  This information is used to bind a specific :class:`server.skeleton.Skeleton`-class to the      application. For more information, refer to the function :func:`_resolveSkel`.
   :vartype kindName: str

   :ivar render: will be set to the appropriate render instance at runtime

   .. attribute:: kindName
      

      

   .. attribute:: adminInfo
      

      

   .. attribute:: accessRights
      

      

   .. method:: _resolveSkelCls(self, *args, **kwargs)

      Retrieve the generally associated :class:`server.skeleton.Skeleton` that is used by
      the application.

      This is either be defined by the member variable *kindName* or by a Skeleton named like the
      application class in lower-case order.

      If this behavior is not wanted, it can be definitely overridden by defining module-specific
      :func:`viewSkel`,:func:`addSkel`, or :func:`editSkel` functions, or by overriding this
      function in general.

      :return: Returns a Skeleton instance that matches the application.
      :rtype: server.skeleton.Skeleton



