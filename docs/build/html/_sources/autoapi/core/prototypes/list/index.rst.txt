:mod:`core.prototypes.list`
===========================

.. py:module:: core.prototypes.list


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   core.prototypes.list.List



.. class:: List(moduleName, modulePath, *args, **kwargs)


   Bases: :class:`viur.core.prototypes.BasicApplication`

   List is a ViUR BasicApplication.

   It is used for multiple data entities of the same kind, and needs to be sub-classed for individual
   modules.

   :ivar kindName: Name of the kind of data entities that are managed by the application.  This information is used to bind a specific :class:`server.skeleton.Skeleton`-class to the      application. For more information, refer to the function :func:`_resolveSkel`.
   :vartype kindName: str

   :ivar adminInfo: todo short info on how to use adminInfo.
   :vartype adminInfo: dict | callable

   .. attribute:: accessRights
      :annotation: = ['add', 'edit', 'view', 'delete']

      

   .. method:: adminInfo(self)


   .. method:: viewSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for viewing an existing entry from the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`addSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for viewing an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: addSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for adding an entry to the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for adding an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: editSkel(self, *args, **kwargs)

      Retrieve a new instance of a :class:`server.skeleton.Skeleton` that is used by the application
      for editing an existing entry from the list.

      The default is a Skeleton instance returned by :func:`_resolveSkel`.

      .. seealso:: :func:`viewSkel`, :func:`editSkel`, :func:`_resolveSkel`

      :return: Returns a Skeleton instance for editing an entry.
      :rtype: server.skeleton.Skeleton


   .. method:: preview(self, skey, *args, **kwargs)

      Renders data for an entry, without reading from the database.
      This function allows to preview an entry without writing it to the database.

      Any entity values are provided via *kwargs*.

      The function uses the viewTemplate of the application.

      :returns: The rendered representation of the the supplied data.


   .. method:: view(self, *args, **kwargs)

      Prepares and renders a single entry for viewing.

      The entry is fetched by its entity key, which either is provided via *kwargs["key"]*,
      or as the first parameter in *args*. The function performs several access control checks
      on the requested entity before it is rendered.

      .. seealso:: :func:`viewSkel`, :func:`canView`, :func:`onView`

      :returns: The rendered representation of the requested entity.

      :raises: :exc:`server.errors.NotAcceptable`, when no *key* is provided.
      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: list(self, *args, **kwargs)

      Prepares and renders a list of entries.

      All supplied parameters are interpreted as filters for the elements displayed.

      Unlike other ViUR BasicApplications, the access control in this function is performed
      by calling the function :func:`listFilter`, which updates the query-filter to match only
      elements which the user is allowed to see.

      .. seealso:: :func:`listFilter`, :func:`server.db.mergeExternalFilter`

      :returns: The rendered list objects for the matching entries.

      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.


   .. method:: edit(self, *args, **kwargs)

      Modify an existing entry, and render the entry, eventually with error notes on incorrect data.
      Data is taken by any other arguments in *kwargs*.

      The entry is fetched by its entity key, which either is provided via *kwargs["key"]*,
      or as the first parameter in *args*. The function performs several access control checks
      on the requested entity before it is modified.

      .. seealso:: :func:`editSkel`, :func:`onEdit`, :func:`onEdited`, :func:`canEdit`

      :returns: The rendered, edited object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.NotAcceptable`, when no *key* is provided.
      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: add(self, *args, **kwargs)

      Add a new entry, and render the entry, eventually with error notes on incorrect data.
      Data is taken by any other arguments in *kwargs*.

      The function performs several access control checks on the requested entity before it is added.

      .. seealso:: :func:`addSkel`, :func:`onAdd`, :func:`onAdded`, :func:`canAdd`

      :returns: The rendered, added object of the entry, eventually with error hints.

      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: delete(self, key, skey, *args, **kwargs)

      Delete an entry.

      The function runs several access control checks on the data before it is deleted.

      .. seealso:: :func:`canDelete`, :func:`editSkel`, :func:`onDeleted`

      :returns: The rendered, deleted object of the entry.

      :raises: :exc:`server.errors.NotFound`, when no entry with the given *key* was found.
      :raises: :exc:`server.errors.Unauthorized`, if the current user does not have the required permissions.
      :raises: :exc:`server.errors.PreconditionFailed`, if the *skey* could not be verified.


   .. method:: index(self, *args, **kwargs)

      Default, SEO-Friendly fallback for view and list.

      :param args:
      :param kwargs:
      :return:


   .. method:: getDefaultListParams(self)


   .. method:: listFilter(self, filter)

      Access control function on item listing.

      This function is invoked by the :func:`list` renderer and the related Jinja2 fetching function,
      and is used to modify the provided filter parameter to match only items that the current user
      is allowed to see.

      :param filter: Query which should be altered.
      :type filter: :class:`server.db.Query`

      :returns: The altered filter, or None if access is not granted.
      :type filter: :class:`server.db.Query`


   .. method:: canView(self, skel: viur.core.skeleton.SkeletonInstance) -> bool

      Checks if the current user can view the given entry.
      Should be identical to what's allowed by listFilter.
      By default, `meth:listFilter` is used to determine what's allowed and whats not; but this
      method can be overridden for performance improvements (to eliminate that additional database access).
      :param skel: The entry we check for
      :return: True if the current session is authorized to view that entry, False otherwise


   .. method:: canAdd(self)

      Access control function for adding permission.

      Checks if the current user has the permission to add a new entry.

      The default behavior is:
      - If no user is logged in, adding is generally refused.
      - If the user has "root" access, adding is generally allowed.
      - If the user has the modules "add" permission (module-add) enabled, adding is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`add`

      :returns: True, if adding entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canPreview(self)

      Access control function for preview permission.

      Checks if the current user has the permission to preview an entry.

      The default behavior is:
      - If no user is logged in, previewing is generally refused.
      - If the user has "root" access, previewing is generally allowed.
      - If the user has the modules "add" or "edit" permission (module-add, module-edit) enabled,             previewing is allowed.

      It should be overridden for module-specific behavior.

      .. seealso:: :func:`preview`

      :returns: True, if previewing entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canEdit(self, skel: viur.core.skeleton.SkeletonInstance)

      Access control function for modification permission.

      Checks if the current user has the permission to edit an entry.

      The default behavior is:
      - If no user is logged in, editing is generally refused.
      - If the user has "root" access, editing is generally allowed.
      - If the user has the modules "edit" permission (module-edit) enabled, editing is allowed.

      It should be overridden for a module-specific behavior.

      .. seealso:: :func:`edit`

      :param skel: The Skeleton that should be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      :returns: True, if editing entries is allowed, False otherwise.
      :rtype: bool


   .. method:: canDelete(self, skel: viur.core.skeleton.SkeletonInstance) -> bool

      Access control function for delete permission.

      Checks if the current user has the permission to delete an entry.

      The default behavior is:
      - If no user is logged in, deleting is generally refused.
      - If the user has "root" access, deleting is generally allowed.
      - If the user has the modules "deleting" permission (module-delete) enabled,             deleting is allowed.

      It should be overridden for a module-specific behavior.

      :param skel: The Skeleton that should be deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`

      :returns: True, if deleting entries is allowed, False otherwise.
      :rtype: bool


   .. method:: onAdd(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called before adding an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be added.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`add`, :func:`onAdded`


   .. method:: onAdded(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called after adding an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been added.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`add`, , :func:`onAdd`


   .. method:: onEdit(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called before editing an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be edited.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdited`


   .. method:: onEdited(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called after modifying an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been modified.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`edit`, :func:`onEdit`


   .. method:: onView(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called when viewing an entry.

      It should be overridden for a module-specific behavior.
      The default is doing nothing.

      :param skel: The Skeleton that is viewed.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`view`


   .. method:: onDelete(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called before deleting an entry.

      It can be overridden for a module-specific behavior.

      :param skel: The Skeleton that is going to be deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`, :func:`onDeleted`


   .. method:: onDeleted(self, skel: viur.core.skeleton.SkeletonInstance)

      Hook function that is called after deleting an entry.

      It should be overridden for a module-specific behavior.
      The default is writing a log entry.

      :param skel: The Skeleton that has been deleted.
      :type skel: :class:`server.skeleton.Skeleton`

      .. seealso:: :func:`delete`, :func:`onDelete`



.. data:: admin
   :annotation: = True

   

.. data:: html
   :annotation: = True

   

.. data:: vi
   :annotation: = True

   

