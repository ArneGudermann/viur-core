:mod:`core.utils`
=================

.. py:module:: core.utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   core.utils.utcNow
   core.utils.generateRandomString
   core.utils.getCurrentUser
   core.utils.markFileForDeletion
   core.utils.escapeString
   core.utils.hmacSign
   core.utils.hmacVerify
   core.utils.downloadUrlFor
   core.utils.seoUrlToEntry
   core.utils.seoUrlToFunction
   core.utils.normalizeKey


.. data:: currentRequest
   

   

.. data:: currentRequestData
   

   

.. data:: currentSession
   

   

.. data:: currentLanguage
   

   

.. data:: projectBasePath
   

   

.. data:: isLocalDevelopmentServer
   

   

.. function:: utcNow()


.. function:: generateRandomString(length: int = 13) -> str

   Return a string containing random characters of given *length*.
   Its safe to use this string in URLs or HTML.

   :type length: int
   :param length: The desired length of the generated string.

   :returns: A string with random characters of the given length.
   :rtype: str


.. function:: getCurrentUser()

   Retrieve current user, if logged in.

   If a user is logged in, this function returns a dict containing user data.

   If no user is logged in, the function returns None.

   :rtype: dict | bool
   :returns: A dict containing information about the logged-in user, None if no user is logged in.


.. function:: markFileForDeletion(dlkey)

   Adds a marker to the data store that the file specified as *dlkey* can be deleted.

   Once the mark has been set, the data store is checked four times (default: every 4 hours)
   if the file is in use somewhere. If it is still in use, the mark goes away, otherwise
   the mark and the file are removed from the datastore. These delayed checks are necessary
   due to database inconsistency.

   :type dlkey: str
   :param dlkey: Unique download-key of the file that shall be marked for deletion.


.. function:: escapeString(val, maxLength=254)

   Quotes several characters and removes "\\n" and "\\0" to prevent XSS injection.

   :param val: The value to be escaped.
   :type val: str

   :param maxLength: Cut-off after maxLength characters. A value of 0 means "unlimited".
   :type maxLength: int

   :returns: The quoted string.
   :rtype: str


.. function:: hmacSign(data: Any) -> str


.. function:: hmacVerify(data: Any, signature: str) -> bool


.. function:: downloadUrlFor(folder: str, fileName: str, derived: bool = False, expires: Union[(timedelta, None)] = timedelta(hours=1)) -> str


.. function:: seoUrlToEntry(module, entry=None, skelType=None, language=None)


.. function:: seoUrlToFunction(module, function, render=None)


.. function:: normalizeKey(key: Union[(None, 'db.KeyClass')]) -> Union[(None, 'db.KeyClass')]

   Normalizes a datastore key (replacing _application with the current one)

   :param key: Key to be normalized.

   :return: Normalized key in string representation.


